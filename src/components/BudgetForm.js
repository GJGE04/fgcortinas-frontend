import React, { useState, useEffect } from "react";
// import axios from "axios";
import { Form, Button, Row, Col, message, Space, Modal, Checkbox, Collapse, Tooltip } from "antd";  // Input, 
import { PlusOutlined, LoadingOutlined, CloseOutlined, EyeOutlined } from '@ant-design/icons';      // DeleteOutlined, 
import "jspdf-autotable";  // Aseg√∫rate de importar el plugin de autoTable
import { notification } from 'antd';
import 'primereact/resources/themes/lara-light-indigo/theme.css';   // Tema de PrimeReact
import 'primereact/resources/primereact.min.css';                   // Estilos generales de PrimeReact
import 'primeicons/primeicons.css';                                 // Iconos de PrimeReact
// import ProductsPanel from './components/BudgetForm/ProductsPanel';
import ProductsPanel from './BudgetForm/ProductsPanel';             // arreglar url en verison final
import SchedulePanel from './BudgetForm/VisitSchedulingPanel';
import GeneralDataPanel from './BudgetForm/GeneralDataPanel';
import ResumenPanel from './BudgetForm/ResumenPanel';               // ajusta el path si es necesario
import EventModal from './BudgetForm/EventModal'; 
import { getProducts } from "../api/productApi"; 
import { getTechnicians } from "../services/apiService";  
import { generatePDF } from '../services/pdfService';               // ajust√° la ruta si es necesario
import { sendPDFToBackend } from "../services/emailService"; 
import { createBudget } from "../services/budgetService";
// import { sendWhatsAppMessage } from '../services/whatsappService';
import { calculateSubtotal } from "../utils/calculos";  
import "../css/CalendarioVisitas.css";

// import { useCallback } from "react";    // useCallback es un hook de React que te permite memorizar una funci√≥n, es decir, evitar que se cree una nueva versi√≥n de esa funci√≥n en cada render. 
                                        // Esto es √∫til en dos casos principales:
                                            // 1. Cuando pas√°s funciones como props a componentes hijos que dependen de referencialidad (optimizaci√≥n).
                                            // 2. Cuando quer√©s evitar warnings como el que est√°s viendo, porque React puede "saber" si esa funci√≥n cambi√≥ o no.

// import esLocale from '@fullcalendar/core/locales/es';        
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';                               
const { Panel } = Collapse;

// const clientIdgoogle = '624383334135-n745f2bncl6ucgsmnls4hlvujmmohk51.apps.googleusercontent.com';  // Reemplaza con tu Client ID de Google
// Inicializamos EmailJS con tu Public Key (User ID)
// emailjs.init('G10RHxIwl7yP1iew5');  // Aqu√≠ va tu public key

const BudgetForm = ({ work, onClose }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [loadingProducts, setLoadingProducts] = useState(false);

  // Estados de selecci√≥n de cliente y t√©cnicos
  // const [client, setClient] = useState(null);
  const [technicians, setTechnicians] = useState([]);

  // 1. Estado global para budgetData
  const [showPDFModal, setShowPDFModal] = useState(false);
  const [pendingBudgetData, setPendingBudgetData] = useState(null);
  // 2. Opciones seleccionadas por el usuario
  const [generatePDFOption, setGeneratePDFOption] = useState(false);  // true
  const [sendEmailOption, setSendEmailOption] = useState(false);      // true
  // const [sendWhatsAppOption, setSendWhatsAppOption] = useState(false);

  // Row Productos
  const [products, setProducts] = useState([{ 
    productId: "", quantity: 1, width: 0, length: 0, price: 0, discount: 0, subtotal: 0, format: null, currency: '',  // üëç Ya bien seteado
    habilitado: { quantityC: false, widthC: false, lengthC: false, priceC: false, discountC: false},
   }]);
  //const [totalUSD, setTotalUSD] = useState(0);
  //const [totalUYU, setTotalUYU] = useState(0);
  const [totals, setTotals] = useState({ USD: 0, UYU: 0 });
  const [availableProducts, setAvailableProducts] = useState([]); 

   // Al principio de tu componente, nuevos estados:
   const [calendarEvents, setCalendarEvents] = useState([]);
   const [selectedEvent, setSelectedEvent] = useState(null);
   const [isModalOpen, setIsModalOpen] = useState(false);
   // Estados necesarios
  const [activePanelKey, setActivePanelKey] = useState(1); // 1 = Panel 1, 2 = Panel 2
  const [selectedDateTime, setSelectedDateTime] = useState('');
  const [newQuote, setNewQuote] = useState({
    visitDate: "",
    // pod√©s agregar m√°s campos si los necesit√°s
  });
  const [pdfProcessing, setPdfProcessing] = useState(false);
  const [pdfError, setPdfError] = useState(false);
  
  console.log("work en BudgetForm:", work);     // Verifica que work no sea undefined   
  const workId = work ? work._id : null;        // Aqu√≠ accedes al ID del trabajo. // console.log("ID del trabajo:", workId); console.log("ID del cliente:", clienteId);
  const client = work?.cliente ? { 
    id: work.cliente._id, 
    name: work.cliente.nombre,
    direccion: work.cliente?.direcciones?.[0] || '',
    // address: work.cliente.direccion || '',
    email: work.cliente?.correos || '',
    phones: work.cliente.telefonos || []
  } : null;

  // Aseg√∫rate de que workId no sea undefined antes de intentar usarlo
  if (!workId) {
    // Maneja el error si el trabajo no tiene un ID
    console.error("No se encontr√≥ el ID del trabajo");
  }

  // T√©cnicos
  // En BudgetForm.jsx
  // const [description, setDescription] = useState('');
  // const [client, setClient] = useState(null); // o cliente ya cargado

  // Funci√≥n para calcular los subtotales y el total de todos los productos. // ‚úÖ Funci√≥n memorizada para evitar warning en useEffect
  /*const calculateTotals = useCallback((productsList = products) => {   // ‚úÖ ¬øC√≥mo evitar que React lo considere ‚Äúnueva‚Äù cada vez?
                                                                      // Usando useCallback, que "memoriza" esa funci√≥n y evita que se cree una nueva si no cambian sus dependencias.
    console.log('Entrando en calculateTotals:');
    let totalUSD = 0; let totalUYU = 0;

    // Recorremos los productos para calcular los totales
    productsList.forEach(product => {
      if (product.currency === 'USD') {
        totalUSD += product.subtotal; // O usa la l√≥gica que ya tengas para calcular el subtotal
      } else {
        totalUYU += product.subtotal; // Lo mismo aqu√≠ para UYU
      }
    });
    console.log("A : " + totalUSD);   console.log("B : " + totalUYU);
    // Actualizamos los valores de los totales
    setTotalUSD(totalUSD);  setTotalUYU(totalUYU);
  }, [products]);   */  // Aseg√∫rate de incluir lo que uses dentro. // Se volver√° a crear solo si cambia 'products'

  // El comportamiento exacto de cu√°ndo se invoca useEffect depende de c√≥mo lo configures:

  // 1. Por defecto (sin dependencias). 
  // Si useEffect se invoca sin un array de dependencias, se ejecuta despu√©s de cada renderizado del componente, 
  // es decir, cada vez que el componente se renderiza (incluyendo actualizaciones de estado y props).
  /*  Evitar useEffect sin dependencias innecesarias. En este caso el componente se renderice en cada cambio
  useEffect(() => {
    console.log("Componente renderizado");
  });  */

  // 2. Con dependencias espec√≠ficas
  // Si le pasas un array de dependencias como segundo argumento a useEffect, este solo se ejecutar√° cuando alguna de esas dependencias cambie.
  // ‚úÖ Efecto que se ejecuta cuando cambia 'products'
  /* useEffect(() => {
    console.log("El estado o props han cambiado");

    calculateTotals();
  }, [products, calculateTotals]);  */ // Recalcular totales cada vez que los productos cambian. 
  //                                // Aunque conceptualmente parece que calculateTotals no cambia, React no lo sabe hasta que lo memorices con useCallback. Por eso la incluimos en el array de dependencias del useEffect.

  // 3. Solo al montar y desmontar
  // Si el array de dependencias est√° vac√≠o [], useEffect solo se ejecutar√° una vez, despu√©s de que el componente se haya montado, 
  // y no se ejecutar√° en actualizaciones posteriores. Este comportamiento es √∫til para realizar tareas como obtener datos solo una vez.

  // Efecto para cargar t√©cnicos y productos al montar
  useEffect(() => {
    // console.log("Componente montado");
    const fetchData = async () => {
      try{
        const tecnicosData = await getTechnicians();      // T√©cnicos
        // setTechnicians(tecnicosData || []);
        setTechnicians(tecnicosData.map(user => ({ value: user._id, label: `${user.username}` })));  // √≥ label: user.username

        // Productos
        setLoadingProducts(true);  // Empieza la carga
        const productsData = await getProducts();           // Esta es la llamada que hace la API a productApi.js
        // console.log('Datos de productos desde la API:', productsData);      // Verifica si los productos vienen de la API correctamente
        if (productsData && productsData.length > 0) {
          // Extraemos el _id, name y price, pero puedes incluir m√°s si lo necesitas
          const transformedProducts = productsData.map(product => {
            if (!product.productType) {
              console.log('Producto sin productType:', product);
            }
            return{
              value: product._id,                     // Aseg√∫rate de que `_id` sea el identificador correcto
              label: `${product.name}`,               // `product.name` es el nombre del producto
              price: product.price,                   // Aseg√∫rate de incluir el precio en cada producto
              currency: product.currency || 'USD',    // Suponiendo que los productos tienen una moneda asociada
              // productType: product.productType ? product.productType.title : 'Desconocido',  // T√≠tulo del tipo de producto
              // format: product.productType ? product.productType.format : 'Desconocido'
              productType: product.productType?.title || 'Desconocido',
              format: product.productType?.format || 'Desconocido'
            }
          });
          setAvailableProducts(transformedProducts); 
          // console.log("Productos disponibles:", transformedProducts);
        } else {
            message.error("La respuesta de la API no contiene los productos.");
            console.error("No se encontraron productos.");
        }
      } catch (error) {
        console.error("Error al cargar los t√©cnicos o los productos:", error);

        // Manejo de errores
        if (error.response && error.response.status === 401) {
          message.error("No autorizado. Por favor, inicia sesi√≥n nuevamente.");
          console.error("Respuesta de error:", error.response);
        } else {
            message.error("No se pudo cargar los productos o los t√©cnicos.");
            console.error("Error sin respuesta de la API:", error);
        } 
      } finally {
        setLoadingProducts(false);
      }
    }
    fetchData();    // Call to fetch technicians and products
    // TEST: forzar un modal al cargar
/*  Modal.confirm({
    title: "Test Modal",
    content: "¬øFunciona esto?",
    okText: "S√≠",
    cancelText: "No",
  }); */
  }, []);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const res = await fetch(`${API_URL}/calendar/events`);  
        const data = await res.json();
  
        const formattedEvents = data.events.map((event) => ({
          id: event.id,
          title: event.summary,
          start: event.start.dateTime || event.start.date,
          end: event.end.dateTime || event.end.date,
          description: event.description,
          backgroundColor: "#1976d2", // o el color que prefieras
        }));
  
        setCalendarEvents(formattedEvents);
        console.log("üìÖ Eventos cargados:", formattedEvents);
      } catch (error) {
        console.error("‚ùå Error cargando eventos:", error);
      }
    };
  
    fetchEvents();
  }, []);

  /* agregar temporalmente esto en el componente principal para depurar. Form.useWatch("description", form) para inspeccionar si description realmente cambia
  const watchedDescription = Form.useWatch('description', form);
  useEffect(() => {
    console.log("üëÄ description actualizado:", watchedDescription);
  }, [watchedDescription]);
*/
  // EFECTO NUEVO: Cuando cambian work o technicians, actualizo el cliente y seteo los valores del formulario
/*  useEffect(() => {
    if (work) {
      // Setear cliente en estado local para poder pasar como prop
      if (work.cliente) {
        setClient({ id: work.cliente._id, name: work.cliente.nombre });
      }

      // Setear t√©cnicos seleccionados en el formulario (ejemplo, si work tiene t√©cnicos asignados)
      if (work.tecnicos && technicians.length > 0) {
        // Aqu√≠ convierto IDs o datos del work a la estructura que espera el form
        const selectedTechs = technicians.filter(t => work.tecnicos.includes(t.value));
        form.setFieldsValue({
          clientId: work.cliente?._id || null,
          technicians: selectedTechs.map(t => t.value),
          // Aqu√≠ otros campos que quieras autocompletar
          visitDate: work.visitDate || null,
          description: work.description || '',
          products: work.products || [],  // si aplicara
        });
      } else {
        // Si no hay t√©cnicos o work.tecnicos, seteo cliente y dem√°s igualmente
        form.setFieldsValue({
          clientId: work.cliente?._id || null,
          visitDate: work.visitDate || null,
          description: work.description || '',
          products: work.products || [],
        });
      }
    }
  }, [work, technicians, form]); */
  // ‚úÖ Cuando se abre el formulario con un trabajo seleccionado
  useEffect(() => {
    /*
    if (work && form && work?.tecnicos?.length > 0) {
      const techIds = work.tecnicos.map(t => t._id);
      form.setFieldsValue({
        cliente: client?.name || '',
        name: `Presupuesto - ${client.name}`,
        direccion: client?.direccion || '',
        email: client?.email || '',
        technicianIds: techIds
      });
    } */
      if (client) {
        console.log("Cliente en BudgetForm:", work);
        const clientAddresses = work?.cliente?.direcciones || [];
        const clientEmails = work?.cliente?.correos || [];
        const clientPhones = work?.cliente?.telefonos || [];
    
        form.setFieldsValue({
          clientId: client.id,
          clientName: client.name,
          name: `Presupuesto ${client.name}`,
          technicianIds: work?.tecnicos?.map(t => t._id) || [],
          address: clientAddresses[0] || '',
          email: clientEmails[0] || '',
          phones: clientPhones.join(', ') || ''  // Campo nuevo
        });
      }
  }, [work, client, form]);

  // ‚úÖ Manejo de cambios por campo. // Funci√≥n para manejar los cambios en los valores de cantidad, ancho, largo, descuento
  // ‚úÖ Paso 1: Cada vez que cambi√°s un campo de un producto, actualiz√°s el estado
  const handleProductDetailChange = (index, field, value) => {    // Cuando cambia un detalle del producto
    // console.log('Entrando en handleProductDetailChange:');
    // const safeValue = field === 'quantity' ? Math.max(1, value || 1) : value;

    // Crea una copia del estado de productos
 /*   const updatedProducts = [...products];
    updatedProducts[index][field] = value;

    const productToUpdate = products[index]; 
    if (!productToUpdate) return;

    updateProduct(productToUpdate);
    console.log("ProductsOut: ", products);

    // √≥
*/
    setProducts(prevProducts => {   // prevProducts es el estado anterior (el array de productos actual).
      const updatedProducts = [...prevProducts];
      // Actualizar el campo cambiado
      updatedProducts[index] = {
        ...updatedProducts[index],
        [field]: value    // = safeValue
      };
      updatedProducts[index].subtotal = calculateSubtotal(updatedProducts[index]);    // Calcular el nuevo subtotal
      return updatedProducts;
    });
  };
  // ‚úÖ useEffect que calcula subtotales solo cuando cambia la data (previniendo loops infinitos)
  // ‚úÖ Paso 2: useEffect recalcula subtotales autom√°ticamente
  useEffect(() => {   // Se dispara cada vez que products cambia
    console.log("recalcular el subtotal cada vez que los productos cambien...");  
  /*  const updatedProducts = products.map(product => {
      const area = product.width * product.length;
      const discount = product.discount || 0;
      const subtotal = ((product.price * area * product.quantity) * (1 - discount / 100)).toFixed(2); 
      console.log("Area", area);  console.log("Disc.", discount);   console.log("subtotal.", subtotal); 

      return { ...product, subtotal: isNaN(subtotal) ? 0 : parseFloat(subtotal) };
    }); 
    console.log("updatedProducts: ", updatedProducts)

    // ‚ö†Ô∏è Solo actualizamos si realmente cambi√≥ el subtotal para evitar loops
    const isDifferent = JSON.stringify(products) !== JSON.stringify(updatedProducts);
    if (isDifferent) setProducts(updatedProducts);    // <- solo actualiza si realmente cambi√≥
    console.log("Different", isDifferent);  */

    const totalUSD = products.filter(p => p.currency === "USD").reduce((acc, p) => acc + p.subtotal, 0);
    const totalUYU = products.filter(p => p.currency === "UYU").reduce((acc, p) => acc + p.subtotal, 0);
    setTotals({ USD: totalUSD, UYU: totalUYU });  
    // console.log("USD", totalUSD);   console.log("UYU", totalUYU);
  }, [products]); // ‚úÖ ¬øY c√≥mo se activa eso?  ->  Cada vez que cambi√°s un valor en el formulario: (handleProductDetailChange)
  
  // funcion que sustituye el useEffect anterior para optimizar para recalcular solo el producto modificado, en lugar de recalcular todo el array de productos.
/*  const updateProduct = (updatedProduct) => {
    console.log("updatedProduct", updatedProduct);
    const subtotal = calculateSubtotal(updatedProduct);
    const newProduct = { 
      ...updatedProduct, 
      subtotal: isNaN(subtotal) ? 0 : parseFloat(subtotal) 
    };     
    console.log("ID", newProduct.productId);  console.log("NewProduct", newProduct); console.log("Product1: ", products);
    setProducts(prevProducts => 
      prevProducts.map(product => 
        product.productId === newProduct.productId ? newProduct : product
      )
    );
  };  */

  // Funci√≥n que maneja los cambios en los productos
  const handleProductChange = (index, field, value) => {
    const foundProduct = availableProducts.find(product => product.value === value);
    if (!foundProduct) return;

    // ‚úÖ Mostrar el t√≠tulo y el formato del tipo de producto
      console.log("ProductType title:", foundProduct.productType);
      console.log("ProductType format:", foundProduct.format); // üéØ esto es lo que quer√©s
  
    const updatedProducts = [...products];    // Crea una copia del estado de productos
    updatedProducts[index] = {
      ...updatedProducts[index],
      productId: value,
      name: foundProduct.label,
      price: foundProduct.price,
      currency: foundProduct.currency || 'USD',
      format: foundProduct.format || null,
      habilitado: {     // Primero, deshabilitamos todo
        quantityC: false,
        widthC: false,
        lengthC: false,
        priceC: false,
        discountC: false,
      },
    };
  
    switch (foundProduct.format) {
      case "Unidad":
        updatedProducts[index].habilitado.quantityC = true;
        updatedProducts[index].habilitado.priceC = true;
        updatedProducts[index].habilitado.discountC = true;
        break;
      case "Ancho x Largo":
        updatedProducts[index].habilitado.quantityC = true;
        updatedProducts[index].habilitado.priceC = true;
        updatedProducts[index].habilitado.discountC = true;
        updatedProducts[index].habilitado.widthC = true;
        updatedProducts[index].habilitado.lengthC = true;
        break;
      case "Lado * Lado x Precio":
      case "Unidad x Largo":
        updatedProducts[index].habilitado.quantityC = true;
        updatedProducts[index].habilitado.priceC = true;
        updatedProducts[index].habilitado.discountC = true;
        updatedProducts[index].habilitado.lengthC = true;
        break;
      default:
        console.warn(`Formato no reconocido: ${foundProduct.format}`);
    }
  
    // Recalcular subtotal
    const q = updatedProducts[index].quantity ?? 1;
    const w = updatedProducts[index].width ?? 1;
    const l = updatedProducts[index].length ?? 1;
    const p = updatedProducts[index].price ?? 0;
    const d = updatedProducts[index].discount ?? 0;
  
    let area = 1;
    switch (foundProduct.format) {
      case "Ancho x Largo":
        area = w * l;
        break;
      case "Lado * Lado x Precio":
      case "Unidad x Largo":
        area = l;
        break;
      default:
        area = 1;
    }
  
    const subtotal = q * area * p * (1 - d / 100);
    updatedProducts[index].subtotal = parseFloat(subtotal.toFixed(2));
  
    setProducts(updatedProducts);     // Actualiza el estado de los productos
    // calculateTotals(updatedProducts);
  };  

  // Funci√≥n para agregar un nuevo producto
  const addProduct = () => {
    setProducts([
      ...products,
      { productId: "", quantity: 0, width: 0, length: 0, price: 0, discount: 0, subtotal: 0, 
        habilitado: { quantityC: false, widthC: false, lengthC: false, priceC: false, discountC: false}, }
    ]);
  };

  // Funci√≥n para eliminar un producto
  const removeProduct = (index) => {
    const updatedProducts = products.filter((_, i) => i !== index);
    setProducts(updatedProducts);
    // calculateTotals(updatedProducts);
  };

  // Handle cancel and close the modal
  const handleCancel = () => {
    console.log("Cancelando el modal de crear presupuesto..."); 
    form.resetFields();
    setProducts([{ productId: "", quantity: 0, width: 0, length: 0, price: 0, discount: 0, subtotal: 0 }]);
    //setTotalUSD(0);   //setTotalUYU(0);
    setShowPDFModal(false);
    setPdfError(false); // ‚úÖ Tambi√©n borramos el estado de error si el usuario cancela
    onClose();
  };

  const handleSubmit = async (values) => {
    console.log("üì• Enviar formulario con valores:", values);
    // Recopilamos todos los datos del formulario
        // const { name, address, description, technicianId } = values;
        //const {name} = values;
       // console.log ("Tecnicos: " , technicians); 
        //console.log(name);
        //console.log ("VALUES: " , values); 

    console.log("üü¢ Entrando en handleSubmit con valores:", values);  // Ac√° deber√≠as ver description
    console.log("‚úÖ Formulario v√°lido. Procesando datos...");  
    // console.log("üîç Antes de validaci√≥n, descripci√≥n:", values.description); 
    console.log("üß™ Campos del formulario:", form.getFieldsValue());
    // console.log("üß™ descriptionTest:", values.descriptionTest);
  
    // 1. Validaci√≥n general...
    // 1.1 üîç Validar que haya visita t√©cnica. // Verificamos que tenga fecha/hora
    if (!newQuote.start || !newQuote.end) {
      message.error("Debes seleccionar una fecha y hora para la visita.");
        // alert("‚ùó Debes agendar una visita t√©cnica antes de continuar.");
      return;
    }

    // 1.2 Asegurar descripci√≥n
    if (!values.description || values.description.trim() === "") {
      values.description = "Sin descripci√≥n";
      console.log("‚ö†Ô∏è Descripci√≥n estaba vac√≠a, se reemplaz√≥");
    }

    // const descripcionFinal = values.description?.trim() || "Sin descripci√≥n4";
    // console.log("descripcionFinal:", descripcionFinal);
  
    // 1.3 Validaci√≥n de productos
    if (products.length === 0 || products.some(p => !p.productId)) {
      message.warning("Debe agregar al menos un producto v√°lido al presupuesto.");
        console.error("Debe agregar al menos un producto v√°lido al presupuesto.");
      return;
    }

    // 1.4 Reforzar cantidad m√≠nima en productos. Asegurar que los productos tengan cantidad >= 1
    const productosValidados = products.map(p => ({
      ...p,
      quantity: p.quantity >= 1 ? p.quantity : 1
    }));
  
    try {
      // 2. Crear evento en Google Calendar
      await createCalendarEvent(newQuote);

      // continuar con guardar presupuesto, generar PDF, etc...
  
      // 3. Armar el presupuesto completo
      console.log ("VALUES: " , values);
      // const budgetData = buildBudgetData(values);
      const budgetData = buildBudgetData({
        ...values,
        products: productosValidados,
      });
      console.log("üì¶ Datos del presupuesto:", budgetData);
  
      // 4. Guardar presupuesto en la base de datos
      // const savedBudget = await handleSaveBudget(budgetData);
      // alert("‚úÖ Presupuesto creado correctamente");
      await handleSaveBudget(budgetData);   
      // Opcional: resetear el formulario
  
      // 5. Guardar en estado para usarlo en el PDF
      // setPendingBudgetData(savedBudget);
      setPendingBudgetData(budgetData);   // √≥  setPendingBudgetData(savedBudget);
  
      // 6. Mostrar modal de confirmaci√≥n o ejecutar directamente
      // ‚úÖ Mostrar modal solo si se marc√≥ el checkbox
      if (generatePDF || sendEmailOption) {
        setShowPDFModal(true);      // üî∏ Muestra el modal de confirmaci√≥n. // Abrimos modal o continuamos directo con processBudget
      } else {
        message.success("Presupuesto guardado correctamente.");   // üî∏ Guarda directo sin PDF
        onClose?.(); // o lo que uses para cerrar
      }
  
      message.success("‚úÖ Visita agendada y presupuesto listo y registrado con √©xito");
      // handleCancel(); // cerrar formulario
      // setShowPDFModal(false)
    } catch (error) {
      console.error("‚ùå Error en handleSubmit al enviar formulario:", error);
      message.error("Ocurri√≥ un error al procesar el presupuesto.");
      alert("‚ùå Fall√≥ al guardar el presupuesto.");
    }
  };

  const createCalendarEvent = async (quote) => {
    console.log("Entrando en createCalendarEvent: " , quote);
    const tecnicoSeleccionadoId = form.getFieldValue('technicianId');
    const tecnicoSeleccionado = technicians.find(t => t.value === tecnicoSeleccionadoId);
    const tecnicoName = tecnicoSeleccionado?.label || 'Sin t√©cnico';
    console.log("Tecnico: " , tecnicoName);      
    try{
      // (technicians.find(t => t.value === form.getFieldValue('technicianId')))?.label || 'Sin t√©cnico'
      const eventData = {
        summary: 'Visita t√©cnica',     // summary: `Visita t√©cnica - ${clientName}`,
        // description: 'Agendada desde el formulario completo de FG Cortinas',
        description: `Visita t√©cnica agendada para el cliente: ${client.name}, atendida por el t√©cnico: ${tecnicoName}.`,
        // description: `Visita t√©cnica para el cliente ${values.nombreCliente || 'sin nombre'}`,
        start: quote.start,
        end: quote.end,
      };
      console.log("eventData: " , eventData);
      // await axios.post('/api/calendar/create-event', eventData);  
      const result = await fetch(`${API_URL}/calendar/create-event`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(eventData),
      });
      
      if (!result.ok) {
        throw new Error(`Error HTTP: ${result.status}`);
      }
      
      const data = await result.json();
      console.log('‚úÖ Evento agendado:', data);
      
      // console.log('‚úÖ Evento agendado:', result.data);
    }
    catch (error) {
      console.error('‚ùå Error al agendar visita:', error);
      message.error('No se pudo agendar la visita t√©cnica');
      return; // Evitamos continuar si falla
    }
  };

  const buildBudgetData = (values) => {
    /*
    const budgetData2 = {
      ...values,
      products,
      totals: {
        UYU: (totals.UYU && !isNaN(totals.UYU)) ? totals.UYU.toFixed(2) : '0.00',   // totalUYU,
        USD: (totals.USD && !isNaN(totals.USD)) ? totals.USD.toFixed(2) : '0.00',   // totalUSD,
      }, 
      
      // üîπ Agregamos la visita t√©cnica
      visita: {
        start: newQuote.start,
        end: newQuote.end,
      },
    }; 
    */
    return {
      work: workId,
      name: values.name,
      address: values.address,
      description: values.description,
      client: values.clientId,
      technician: values.technicianIds,
      clienteName: client?.name,          // Aseg√∫rate de tener estos IDs en tu form
      tecnicoName: (technicians.find(t => t.value === form.getFieldValue('technicianId')))?.label || 'Sin t√©cnico',
      totalUYU: Number(totals.UYU),
      totalUSD: Number(totals.USD),
      totals: {
        UYU: (totals.UYU && !isNaN(totals.UYU)) ? totals.UYU.toFixed(2) : '0.00',   // totalUYU,
        USD: (totals.USD && !isNaN(totals.USD)) ? totals.USD.toFixed(2) : '0.00',   // totalUSD,
      }, 
      creationDate: new Date().toISOString(),
      products: products.map(p => ({
        product: p.productId,
        quantity: p.quantity,
        width: p.width,
        length: p.length,
        discount: p.discount || 0,
        subtotal: p.subtotal || 0,
      })), 
      email: values.email,
  /*    clientPhone: values.clientPhone,
      // üîπ Agregamos la visita t√©cnica
      visita: {
        start: newQuote.start,
        end: newQuote.end, 
      } */
    };
  };

  const handleSaveBudget = async (data) => {
    try {
      const saved = await createBudget(data);
      console.log("‚úÖ Presupuesto guardado:", saved);
      return saved;
    } catch (error) {
      console.error("‚ùå Error al guardar presupuesto:", error.response?.data || error.message);
      throw error;
    }
  };

  const handleGeneratePDF = async () => { 
    console.log("üìù Confirmado: generar PDF!!!!"); 
      setShowPDFModal(false);
      setLoading(true);
      try {
        console.log("üìÑ Generando PDF para presupuesto. PendingBudgetData:", pendingBudgetData);
        await processBudget(pendingBudgetData);
        message.success("Presupuesto generado correctamente.");

        // Si el env√≠o fue exitoso:
        form.resetFields();   // <-- Esto limpia todos los campos
        // handleCancel();    // o lo que uses para cerrar el form
        onClose();            // <-- Esto cierra el modal principal
      } catch (error) {
        console.error("‚ùå Error al generar PDF del presupuesto:", error);
        message.error("Error al generar el presupuesto.");
      } finally {
        setLoading(false);
        setPendingBudgetData(null);   // limpiar
      }
    };

    const processBudget = async (budgetData) => {
      setPdfProcessing(true); // üîÑ Mostrar spinner
      setPdfError(false); // üîÑ Resetear estado de error al comenzar
      let pdfBase64 = null;

      // Si la opci√≥n de generar PDF est√° activada. // Generar PDF y obtener el pdfData (Blob)
      try{
        // 1. üîπ Generar PDF si se seleccion√≥
        if (generatePDFOption || sendEmailOption) {
          console.log("üìÑ 1234... invocando generatePDF...", generatePDFOption, sendEmailOption);
          pdfBase64  = await generatePDF(budgetData, generatePDFOption);  // true: descarga local
        } 
       
        // 2. üîπ Guardar presupuesto en DB
        // await handleSaveBudget2(budgetData);
      
        // 3. Si la opci√≥n de enviar por correo est√° activada. // Enviar por correo si se seleccion√≥ la opci√≥n que corresponde
         // const email = form.getFieldValue("email");
        const email = budgetData.email;
        console.log(generatePDFOption, sendEmailOption, email );
        if (sendEmailOption && pdfBase64 && email) {   
          await sendPDFToBackend(pdfBase64, budgetData);
        }
        // o 
        /* await sendBudgetEmail({
          to: email,
          subject: "Presupuesto generado",
          body: "Adjunto encontrar√° el presupuesto solicitado.",
          attachment: pdfBase64,
          filename: "presupuesto.pdf",
        }); */

        notification.success({
          message: 'Operaci√≥n completada',
          description: `${
            generatePDFOption ? "PDF generado." : ""
          } ${sendEmailOption ? "Correo enviado." : ""}`,
        });
        message.success(`üìß Presupuesto enviado a ${email}`);

        // 4. Otras acciones (descargar, WhatsApp) aqu√≠ si quer√©s
        /* if (sendWhatsAppOption && pdfBase64 && budgetData.clientPhone) {
          await sendWhatsAppMessage(budgetData.clientPhone, pdfBase64);
        } */

        message.success("Presupuesto generado y enviado correctamente.");
      } catch (error) {
        // console.error("‚ùå Error enviando el email:", error); console.error("‚ùå Error en generaci√≥n del pdf:", error);
        console.error("‚ùå Error:", error);
        setPdfError(true); // ‚ö†Ô∏è Mostrar bot√≥n "Reintentar"
        message.error("Error al procesar."); // message.error("Error al enviar el presupuesto por correo."); message.error("Ocurri√≥ un error al generar el pdf.");
        notification.error({
          message: 'Error al procesar',
          description: `No se pudo completar la operaci√≥n: ${error.message || 'Error desconocido'}`,
        });
        // No cerramos el modal
      } finally {
        setPdfProcessing(false); // ‚úÖ Ocultar spinner
      }
    };
        // sendEmailWithPDF(pdfData, budgetData);   (env√≠o desde el frontend)  o  sendBudgetEmail(budgetData, pdfBase64);     (envio desde el backend)  
        // varios remitentes:
            /*
            await sendPDFToBackend(pdfBase64, {
              ...budgetData,
              email: values.emails,           // puede ser string separado por comas o array
              subject: values.subject,        // asunto personalizado desde un input
              message: values.message,        // mensaje opcional
            }); */

            /*  Tu frontend podr√° ahora llamar:
            await sendPDFToBackend(pdfBase64, {
              email: 'cliente1@gmail.com, cliente2@gmail.com',
              subject: 'Presupuesto para su proyecto',
              message: '¬°Gracias por confiar en nosotros! Adjunto presupuesto.',
              name: 'Presupuesto #124',
            });
            */       
    
    const handleCancelPDF = () => {
      setShowPDFModal(false);
      setPendingBudgetData(null);
      // setPdfError(false);
    };  

    const handlePreviewPDF = () => {
      // l√≥gica para generar el PDF sin enviarlo
      console.log("Vista previa PDF generada");
      console.log("üìÑ Vista previa PDF no implementada todav√≠a");
      // exportToPDF({ preview: true }); // si quer√©s diferenciar
    }; 

    const handleSaveBudget2 = async (rawBudgetData) => {
      console.log("üü¢ Entrando en handleSaveBudget en BudgetForm.js");
    
      try {
        // Transformar los datos al formato requerido por el backend
        const transformedBudget = {
          work: rawBudgetData.workId,  // <- Aseg√∫rate de pasar este campo desde el form o estado
          name: rawBudgetData.name,
          address: rawBudgetData.address,
          description: rawBudgetData.description,
          client: rawBudgetData.clientId,          // ID del cliente
          technician: rawBudgetData.technicianId,  // ID del t√©cnico
          totalUYU: Number(rawBudgetData.totals?.UYU) || 0,
          totalUSD: Number(rawBudgetData.totals?.USD) || 0,
          creationDate: new Date().toISOString(),  // Puedes usar la fecha actual o una del form
          products: rawBudgetData.products.map(p => ({
            product: p.productId,        // El backend espera `product`
            quantity: p.quantity || 1,
            width: p.width || 0,
            length: p.length || 0,
            discount: p.discount || 0,
            subtotal: p.subtotal || 0,
          }))
        };
    
        // Verificar la estructura de budgetData y para ver exactamente qu√© se est√° enviando.
        console.log("üì§ Enviando al backend:", JSON.stringify(transformedBudget, null, 2));   
    
        const response = await createBudget(transformedBudget);
    
        console.log("‚úÖ Presupuesto guardado con √©xito:", response);
        message.success("Presupuesto guardado en la base de datos.");
      } catch (error) {
        console.error("‚ùå Error guardando el presupuesto:", error.response?.data || error.message);
        message.error(`Error al guardar el presupuesto: ${error.response?.data?.message || error.message}`);
      }
    };    

    // Funci√≥n para manejar cambios en las opciones de generar PDF y enviar correo
    const handleGeneratePDFChange = (e) => setGeneratePDFOption(e.target.checked);
    const handleSendEmailChange = (e) => setSendEmailOption(e.target.checked);

    // Calendario
    // Funci√≥n que se dispara al hacer click en la celda
    const handleCellClick1 = (dateTimeFromCell) => {
      const selectedDate = new Date(dateTimeFromCell.dateStr);    // forzamos a Date nativo
      console.log('Se hizo click en: ', selectedDate);

      // Formatear la fecha para el input datetime-local (yyyy-MM-ddTHH:mm)
      const formattedDate = selectedDate.toISOString().substring(0, 16);  // toISOString() genera una fecha como: 2025-04-28T18:30:00.000Z  ; 
                                                                      // .slice(0,16) te deja justo el formato yyyy-MM-ddTHH:mm que es el que pide el input datetime-local.

      setSelectedDateTime(selectedDate); // Guard√°s la fecha propuesta
      setNewQuote(prev => ({ ...prev, visitDate: formattedDate }));
      setActivePanelKey('2'); // Cambi√°s al Panel 2
    };    

    const handleCellClick2 = async (info) => {
      const start = info.dateStr;
      const end = new Date(new Date(start).getTime() + 60 * 60 * 1000).toISOString(); // duraci√≥n 1 hora
    
      const event = {
        summary: 'Visita T√©cnica',
        description: 'Agenda de visita t√©cnica para el cliente',
        start,
        end,
      };
    
      try {
        const response = await fetch('http://localhost:3001/api/calendar/create-event', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(event),
        });
    
        const result = await response.json();
        console.log('Evento creado:', result);
      } catch (error) {
        console.error('Error al crear evento:', error);
      }
    };   
    
    // üîπ Agendar visita (desde clic en celda vac√≠a)
    const handleCellClick = async (arg) => {
      const confirmed = window.confirm(`¬øConfirmar visita t√©cnica para el ${arg.dateStr}?`);
      if (!confirmed) return;

      const selectedStart = new Date(arg.date);
      const selectedEnd = new Date(selectedStart.getTime() + 60 * 60 * 1000); // 1 hora despu√©s

      setNewQuote((prev) => ({
        ...prev,
        start: selectedStart.toISOString(),
        end: selectedEnd.toISOString(),
      }));

      // Activamos el siguiente panel
      message.success(`üìÖ Seleccionaste: ${selectedStart.toLocaleString()}`);
      setActivePanelKey("2"); // Ir al pr√≥ximo paso (Datos Generales)
      alert(`üìÖ Visita t√©cnica seleccionada para el ${selectedStart.toLocaleString()}. Ahora completa los dem√°s datos.`);

      // Marcar temporalmente la visita que seleccion√≥ el usuario (pero que a√∫n no se confirm√≥ como evento real en Google Calendar)
      const tempEvent = {
        id: "temp-visit", // un id √∫nico temporal
        title: "Visita T√©cnica (pendiente)",
        start: selectedStart,
        end: selectedEnd,
        backgroundColor: "#FFC107", // amarillo (para destacar que est√° pendiente)
        borderColor: "#FFC107",
      };
      
      setCalendarEvents((prev) => {
        // Eliminamos cualquier evento temporal anterior y agregamos el nuevo
        const filtered = prev.filter((e) => e.id !== "temp-visit");
        return [...filtered, tempEvent];
      });      
    };

    // üîπ Click sobre un evento existente
    const handleEventClick = (clickInfo) => {
      setSelectedEvent({
        id: clickInfo.event.id,
        title: clickInfo.event.title,
        description: clickInfo.event.extendedProps.description || "",
        start: clickInfo.event.start,
        end: clickInfo.event.end,
        backgroundColor: clickInfo.event.backgroundColor || "#1976d2",
      });
      setIsModalOpen(true);
    };

    const toISO = (value) =>
      typeof value === "string" ? value : value.toISOString();

    // üîπ Guardar evento (nuevo o editado)
    const handleSaveEvent = async (eventData) => {
      const isNew = !eventData.id;

      if (new Date(eventData.end) <= new Date(eventData.start)) {
        alert("‚ùå La hora de finalizaci√≥n debe ser posterior a la de inicio.");
        return;
      }      
    
      try {
        const url = isNew
          ? "/api/calendar/create-event"
          : `/api/calendar/update-event/${eventData.id}`;
        const method = isNew ? "POST" : "PUT";
    
        const response = await fetch(url, {
          method,
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            summary: eventData.title,
            description: eventData.description,
            start: toISO(eventData.start),
            end: toISO(eventData.end),
          }),
        });
    
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al guardar');
        }        
    
        const result = await response.json();
    
        if (isNew) {
          setCalendarEvents((prev) => [
            ...prev,
            { ...eventData, id: result.event.id },
          ]);
        } else {
          setCalendarEvents((prev) =>
            prev.map((e) => (e.id === eventData.id ? { ...e, ...eventData } : e))
          );
        }
    
        setIsModalOpen(false);
        alert(`‚úÖ Evento ${isNew ? "creado" : "actualizado"}`);
      } catch (error) {
        console.error(error);
        alert("‚ùå No se pudo guardar el evento");
      }
    };    
    
    // üîπ Eliminar evento
    const handleDeleteEvent = async () => {
      if (!selectedEvent) return;
    
      const confirmed = window.confirm(`¬øEliminar evento "${selectedEvent.title}"?`);
      if (!confirmed) return;
    
      try {
        const res = await fetch(`/api/calendar/delete-event/${selectedEvent.id}`, {
          method: "DELETE",
        });
    
        if (!res.ok) throw new Error("Error al eliminar");
    
        setCalendarEvents((prev) => prev.filter((e) => e.id !== selectedEvent.id));
        setIsModalOpen(false);
        alert("‚úÖ Evento eliminado");
      } catch (err) {
        console.error(err);
        alert("‚ùå Fall√≥ la eliminaci√≥n");
      }
    };    

    // üîπ Mover o redimensionar eventos (arrastrar o cambiar duraci√≥n)
    const handleEventDropOrResize = async (info) => {
      const event = info.event;
    
      const updatedEvent = {
        id: event.id,
        title: event.title,
        description: event.extendedProps.description || "",
        start: event.start,
        end: event.end || new Date(event.start.getTime() + 60 * 60 * 1000),
        backgroundColor: event.backgroundColor || "#1976d2",
      };
    
      try {
        const res = await fetch(`/api/calendar/update-event/${event.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            summary: updatedEvent.title,
            description: updatedEvent.description,
            start: updatedEvent.start.toISOString(),
            end: updatedEvent.end.toISOString(),
          }),
        });
    
        if (!res.ok) throw new Error("Error al actualizar");
    
        alert("‚úÖ Evento actualizado");
      } catch (err) {
        console.error(err);
        alert("‚ùå No se pudo actualizar el evento");
        info.revert(); // Revertir movimiento si falla
      }
    };      


    const handleEditEvent = (event) => {
      setSelectedEvent({
        id: event.id,
        title: event.title,
        description: event.extendedProps.description || "",
        start: event.start,
        end: event.end,
        backgroundColor: event.backgroundColor || "#1976d2",
      });
      setIsModalOpen(true);
    };  

    const modalTitle = (() => {
      if (generatePDFOption && sendEmailOption) {
        return "¬øGenerar PDF y enviar por correo?";
      } else if (generatePDFOption) {
        return "¬øGenerar PDF del presupuesto?";
      } else if (sendEmailOption) {
        return "¬øEnviar presupuesto por correo?";
      } else {
        return "¬øProceder con la operaci√≥n?";
      }
    })();    

    const modalDescription = (() => {
      if (generatePDFOption && sendEmailOption)
        return "Se generar√° el PDF del presupuesto y se enviar√° por correo al cliente.";
      if (generatePDFOption)
        return "Se generar√° y descargar√° el PDF del presupuesto.";
      if (sendEmailOption)
        return "Se enviar√° el presupuesto por correo.";
      return "No hay ninguna acci√≥n seleccionada.";
    })();
    
    const okButtonText = (() => {
      if (generatePDFOption && sendEmailOption) return "S√≠, generar y enviar";
      if (generatePDFOption) return "S√≠, generar";
      if (sendEmailOption) return "S√≠, enviar";
      return "S√≠, proceder";
    })();

    const shouldDisableOkButton = !generatePDFOption && !sendEmailOption;
     
  return (
    <div>
        <Form form={form} layout="vertical" onFinish={handleSubmit} >    {/* Aqu√≠ la invocaci√≥n autom√°tica de handleSubmit */}
          {/* Scroll horizontal en pantallas chicas */}
          <div style={{ overflowX: 'auto' }}>
          {/*  <Collapse defaultActiveKey={['1', '2']} accordion>  */}
          <Collapse activeKey={activePanelKey} onChange={(key) => setActivePanelKey(key)} accordion>

            {/* Visit Scheduling Panel */}
            <Panel header="Agendar Visita T√©cnica" key="1"> 
              <SchedulePanel 
                events={calendarEvents}
                handleCellClick={handleCellClick}  
                handleEventClick={handleEventClick} 
                handleEventDrop={handleEventDropOrResize}
                handleEventResize={handleEventDropOrResize}
                handleEditEvent={handleEditEvent}
              />
            </Panel>

            {/* Datos generales */}
            <Panel header="Datos Generales del Presupuesto" key="2">  
              <GeneralDataPanel
                form={form}
                client={client} // üëà aqu√≠ pasas el cliente
                technicians={technicians}
                //newQuote={newQuote}
                //setNewQuote={setNewQuote}
                //description={description}
                //onDescriptionChange={setDescription}
              />
            </Panel>
              
             {/*ProductsPanel */}
             
             <Panel header="Productos Seleccionados" key="3">
              <ProductsPanel
                products={products}
                availableProducts={availableProducts}
                handleProductChange={handleProductChange}
                handleProductDetailChange={handleProductDetailChange}
                removeProduct={removeProduct}
                addProduct={addProduct}
                totals={totals}
              />
            </Panel>
              
              {/* Opciones adicionales */}
              <Panel header="Opciones Adicionales" key="4">  

                {/* Opciones de generar PDF y enviar por correo */}
                <Row gutter={16} style={{ marginTop: 20 }}>
                  <Col>
                    <Checkbox onChange={handleGeneratePDFChange}>Generar PDF</Checkbox>
                  </Col>
                  <Col>
                    <Tooltip title={!form.getFieldValue('email') ? 'Ingresa un correo para poder enviar' : ''}>
                      <Checkbox
                        onChange={handleSendEmailChange}
                        disabled={!form.getFieldValue('email')}
                      >
                        Enviar por correo
                      </Checkbox>
                    </Tooltip>
                  </Col>
                  {/*
                  <Col>
                    <Form.Item label="Email (opcional)" name="email">
                      <Input placeholder="ejemplo@correo.com" />
                    </Form.Item>
                  </Col>  
                  */}
                </Row>
              </Panel>
              

              {/* Resumen del Presupuesto */}
              <Panel header="Resumen del Presupuesto" key="5">
                <ResumenPanel products={products} totals={totals} newQuote={newQuote} />
              </Panel>  
              

          </Collapse>

            <Space style={{ marginTop: 16 }} align="center" size="large">
              <Button onClick={handleCancel} icon={<CloseOutlined />} size="large" style={{ width: "120px", backgroundColor: "#f44336", color: "white" }}>
                Cancelar
              </Button>

              <Button type="primary" htmlType="submit" 
                // onClick={showConfirmationModal} 
                // onClick={() => {setShowPDFModal(); }} 
                /*onClick={() => {
                  if (generatePDFOption) {
                    setShowPDFModal(true); // Mostrar el modal
                  } else {
                    form.submit(); // Ejecutar el submit directamente o lo que quieras que pase si no se genera PDF
                    // √≥ await handleSaveBudget(...); // o lo que necesites hacer
                  }
                }} */ // ‚ö†Ô∏è No uses onClick={...} aqu√≠, ya que queremos que el formulario ejecute onFinish={handleSubmit} por s√≠ solo.
                icon={loading ? <LoadingOutlined /> : <PlusOutlined />} 
                size="large" style={{ width: "290px" }}>
                {loading ? 'Cargando' : 'Confirmar y Generar Presupuesto'}
              </Button>
{/*
              <Button
                onClick={handlePreviewPDF}
                icon={<EyeOutlined />}
                size="large"
                style={{ width: "160px", backgroundColor: "#1976D2", color: "white" }}
              >
                Vista Previa PDF
              </Button> */}
{/*
<Form.Item label="Descripci√≥n (test)" name="descriptionTest">
  <Input.TextArea />
</Form.Item>
*/}
            </Space>
          </div>
        </Form>

      {/* üîª Agreg√°s el modal ac√°, al final del return */}
      <Modal
        title={modalTitle}
        open={showPDFModal}
        // icon: <ExclamationCircleOutlined />,
        // content= "Esto es solo una prueba."
        onOk={handleGeneratePDF}      // onOk: () => console.log("OK"),
        onCancel={handleCancelPDF}    // onCancel: () => console.log("Cancelado"),    
        okText={okButtonText}
        cancelText="Cancelar"
        confirmLoading={pdfProcessing} // üîÑ Esto activa el spinner
        okButtonProps={{ disabled: shouldDisableOkButton }}
      >
        <p>
          {/*}
          {generatePDFOption && sendEmailOption
            ? "Se generar√° el PDF y se enviar√° por correo."
            : generatePDFOption
            ? "Se generar√° y descargar√° el PDF del presupuesto."
            : sendEmailOption
            ? "Se enviar√° el presupuesto por correo."
            : "No hay ninguna acci√≥n seleccionada."} */}
            {modalDescription}
        </p>

        {pdfError && (
          <div style={{ marginTop: 16 }}>
            <p style={{ color: 'red' }}>Ocurri√≥ un error. Puede reintentar la operaci√≥n.</p>
            <Button
              type="primary"
              onClick={handleGeneratePDF}
              loading={pdfProcessing}
            >
              Reintentar
            </Button>
          </div>
        )}
      </Modal>

      {/* Agreg√°s el modal al final */}
      <EventModal
        open={isModalOpen}
        event={selectedEvent}
        onClose={() => setIsModalOpen(false)}
        onSave={handleSaveEvent}
        onDelete={handleDeleteEvent}
      />

    </div>
    );
};

export default BudgetForm;

/*
‚úÖ Funcionalidades a ejecutar
Cuando se env√≠a el formulario, pueden ocurrir hasta 4 acciones:

‚úÖ Guardar el presupuesto en la base de datos

üì® Enviar un PDF por email

üìÇ Guardar el PDF localmente (descargar o en sistema de archivos)

üí¨ Enviar un mensaje de WhatsApp con el presupuesto

‚úÖ Orden propuesto:
// Al enviar el formulario
1. Validar los datos del formulario
2. Guardar el presupuesto en la base de datos
3. Generar el PDF del presupuesto
4. Si el usuario eligi√≥ enviar por email ‚Üí Enviar el PDF por email
5. Si el usuario eligi√≥ guardar localmente ‚Üí Descargar o guardar el PDF
6. Si el usuario eligi√≥ enviar por WhatsApp ‚Üí Enviar el PDF o un link v√≠a WhatsApp

‚úîÔ∏è Ventajas de esta estructura
C√≥digo limpio y mantenible: Cada acci√≥n es una funci√≥n separada.

Evita duplicaciones: PDF solo se genera una vez.

Ejecuci√≥n segura: Si guardar falla, no se intenta nada m√°s.

Flexible: Se adapta f√°cilmente si luego agreg√°s Telegram, Google Drive, etc.

{/* Tasa de cambio 
                  <Col span={4}>
                      <Form.Item label="Tasa de Cambio" style={{ textAlign: 'center' }}>
                      <InputNumber
                          value={exchangeRate}
                          // onChange={(value) => setExchangeRate(value)}
                          onChange={handleExchangeRateChange} // Actualiza la tasa de cambio
                          style={{ width: '100%' }}
                          min={0}
                          step={0.01} // Permite valores decimales
                          precision={2} // Limita a 2 decimales
                          placeholder="Tasa de Cambio"
                      />
                      </Form.Item>
                  </Col>
                  *

*/

/*
Con esto ten√©s:

üéØ Texto adaptado a las opciones activas.

‚úÖ Bot√≥n de acci√≥n desactivado si no se elige nada.

üîÑ Loader durante el proceso.

üîî Notificaciones de √©xito o error.

üìå El modal se cierra solo si todo sale bien.


Esto hace que:

üîÅ Si ocurre un error, se muestre un mensaje y un bot√≥n para reintentar.

üîí El modal no se cierra, as√≠ que el usuario no pierde el contexto.

üîÑ Si el usuario hace clic en ‚ÄúReintentar‚Äù, se ejecuta el mismo flujo.

*/